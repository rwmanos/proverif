(*
    This is from class on Secrecy and Authentication, slide 7.
*)

free net, spy.
private free initialInitiatorData, initialResponderData.

(* the cryptographic constructors *)
fun pencrypt/2.         (* public key encryption *)
fun sign/2.             (* digital signing *)
fun enc/1.              (* extracts encryption key from a key-pair *)
fun dec/1.              (* extracts decryption key from a key-pair *)

(* the cryptographic destructors *)
reduc pdecrypt (pencrypt(x, enc(y)), dec(y)) = x.
reduc unsign(sign(x, enc(y)), dec(y)) = x.

(* a constructor that maps agentsto their secret key-pairs *)
private fun pubkeypair/1.
private fun signkeypair/1.
reduc pubkey(agent) = enc(pubkeypair(agent)).
reduc unsignkey(agent) = dec(signkeypair(agent)).

(* the queries *)
query attacker: s.
query attacker: flagA.
query attacker: flagB.

let initializer =
    new agent;
    let pkp = pubkeypair(agent) in
        let skp = signkeypair(agent) in
            out(initialInitiatorData, (agent, enc(skp)));
            out(initialResponderData, (agent, dec(pkp)));
            out(net, (agent, enc(pkp), dec(skp))).

let initiator =
    in(initialInitiatorData, (a,sa));
    !
    in(net, b);
    if a <> b then
        let pb = pubkey(b) in
            new s;
            (
                if b <> spy then
                    new flagA;
                    out(s, flagA)
            ) |
            out(net, a);
            in(net, n);
            out(net, pencrypt(sign((s, b, n), sa), pb)).

let responder =
    in(initialResponderData, (b, db));
    in(net,a);
    if a <> b then
        new n;
        out(net, n);
        in(net, (signedencrypted));
        let signed = pdecrypt(signedencrypted, db) in
            let (s, =b, =n) = unsign(signed, unsignkey(a)) in
                    if a <> spy then
                        new flagB;
                        out(s, flagB).

let compromised =
    let pkp = pubkeypair(spy) in
        let skp = signkeypair(spy) in
            out(net, (pkp, skp)).

process
    !initiator  |
    !responder  |
    compromised |
    !initializer

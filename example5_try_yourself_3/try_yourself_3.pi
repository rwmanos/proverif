(*
    This is from class on Secrecy and Authentication, slide 14.
*)

fun encrypt/2.
reduc decrypt(encrypt(m, k), k) = m.

fun host/1.
private reduc getkey(host(x)) = x.

free c.
private free secretA, secretB.
private free k.
noninterf secretA, secretB.

let processA =
    in(c, hostB0);
    new Na;
    out(c, (hostA, hostB0, encrypt((Na, hostB0), kA)));
    in(c, (m2));
    let (=Na, k) = decrypt(m2, kA) in
        if hostB0 = hostB then
            out(c, encrypt(secretA, k)).

let processB =
    in(c, (hostA1, =hostB, m2));
    new Nb;
    out(c, (hostA1, hostB, m2, encrypt((Nb, hostB), kB)));
    in(c, (m3, m4));
    let (=Nb, k) = decrypt(m4, kB) in
        out(c, (m3));
        if hostA1 = hostA then
            out(c, encrypt(secretB, k)).

let processS =
    in(c, (hostA1, hostB1, m2, m3));
    let (Na1, =hostA1) = decrypt(m2, getkey(hostA1)) in
        let (Nb1, =hostB1) = decrypt(m3, getkey(hostB1)) in
            out(c, (encrypt((Na1, k), getkey(hostA1)), encrypt((Nb1, k), getkey(hostB1)))).

process
    new kA;
    new kB;
    let hostA = host(kA) in
        let hostB = host(kB) in
            out(c, hostA);
            out(c, hostB);
            (!processA | !processB | !processS)
